#RequireContext CTmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib

#Include "Libs/Nadeo/Layers2.Script.txt" as Layers2
#Include "Libs/Nadeo/TrackMania/TM.Script.txt" as TM

#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Envimix/Skins.Script.txt" as Skins

#Setting S_Car ""

declare Ident[Text] VehicleList;
declare CTaskResult_Ghost[Text] GhostList;
declare Boolean Terminate;
declare Text[] ResumeInfo;

declare CGhost Ghost;
declare Text Vehicle;

declare CTaskResult SetRecordRequest;
declare CTaskResult_NaturalLeaderBoardInfoList LeaderboardRequest;
declare CTaskResult_BuddiesChallengeRecord LeaderboardBuddiesRequest;

declare Text[Text] Replays;

declare Text LastVehicle;

declare Boolean Finished;
declare Text[] Zones;

declare Integer LastPB;

Void Private_RefreshPlayableGhost(Text _Car) {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	declare netwrite Integer Net_NEM_Start for UI;
	declare netwrite Text[] Net_NEM_GhostCars for UI;
	declare netwrite Integer[] Net_NEM_GhostTimes for UI;
	declare netwrite Integer[][] Net_NEM_GhostCheckpoints for UI;

	RaceGhost_Add(GhostList[_Car].Ghost, False);
		
	Net_NEM_GhostCars.add(_Car);
	Net_NEM_GhostTimes.add(GhostList[_Car].Ghost.Result.Time);
	
	declare Integer[] CheckpointArray;
	for(i,0,GhostList[_Car].Ghost.Result.Checkpoints.count-1)
		CheckpointArray.add(GhostList[_Car].Ghost.Result.Checkpoints[i]);
	Net_NEM_GhostCheckpoints.add(CheckpointArray);
}

Void RefreshPersonalGhosts() {
	declare Cars = ["CanyonCar","StadiumCar","ValleyCar","LagoonCar","DesertCar","SnowCar","RallyCar","BayCar","IslandCar","CoastCar"];
	
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	declare Ident MyUserID for Player.User;
	
	declare netwrite Integer Net_NEM_Start for UI;
	declare netwrite Text[] Net_NEM_GhostCars for UI;
	declare netwrite Integer[] Net_NEM_GhostTimes for UI;
	declare netwrite Integer[][] Net_NEM_GhostCheckpoints for UI;
	
	Net_NEM_Start = 0;
	Net_NEM_GhostCars.clear();
	Net_NEM_GhostTimes.clear();
	Net_NEM_GhostCheckpoints.clear();
	
	for(i,0,9) GhostList[Cars[i]] = ScoreMgr.Map_GetRecordGhost(MyUserID,Map.MapInfo.MapUid,Cars[i]^"2");
	for(i,0,9) wait(!GhostList[Cars[i]].IsProcessing);
	
	RaceGhost_RemoveAll();
	
	for(i,0,9) {
		if(GhostList[Cars[i]].Ghost != Null && ResumeInfo[i+1] == "True") {
			Private_RefreshPlayableGhost(Cars[i]);
		}
	}
}

Void RefreshGhosts(Text[Text] _OnlineGhosts) {
	RefreshPersonalGhosts();
	
	if(_OnlineGhosts.count > 0) {
		Layers2::Attach("LoadingIngame",Null);
		
		foreach(File => Replay,_OnlineGhosts) {
			declare TaskGhost = DataFileMgr.Ghost_Download(File, Replay);
			wait(!TaskGhost.IsProcessing);
			if(TaskGhost.HasSucceeded)
				RaceGhost_Add(TaskGhost.Ghost, False);
		}
		
		Layers2::Detach("LoadingIngame",Null);
	}
}

Void RefreshPersonalRecords() {
	declare Cars = ["CanyonCar","StadiumCar","ValleyCar","LagoonCar", "DesertCar", "SnowCar", "RallyCar", "BayCar", "IslandCar", "CoastCar"];

	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	declare Ident MyUserID for Player.User;
	
	declare netwrite Integer[] Net_Records for UI;
	declare netwrite Integer[] Net_Skillpoints for UI;
	Net_Records.clear();
	Net_Skillpoints.clear();
	
	for(i,0,9) {
		Net_Records.add(ScoreMgr.Map_GetRecord(MyUserID, Map.MapInfo.MapUid, Cars[i]^"2"));
		Net_Skillpoints.add(ScoreMgr.Map_GetSkillPoints(MyUserID, Map.MapInfo.MapUid, Cars[i]^"2"));
	}
}

Void SpawnPlayer(CTmPlayer _Player, Text[Text] _OnlineGhosts) {
	declare UI <=> UIManager.GetUI(_Player);
	
	Vehicle = ResumeInfo[0];
	
	_Player.ForceModelId = VehicleList[Vehicle];
	if(_Player.ForceModelId == VehicleList[MapPlayerModelName]) Terminate = True;
	
	RefreshGhosts(_OnlineGhosts);
	
	if(GhostList.existskey(Vehicle) && GhostList[Vehicle].Ghost != Null) {
		_Player.Score.BestRace = GhostList[Vehicle].Ghost.Result;
	}
	else _Player.Score.BestRace = Null;
	
	_Player.Score.PrevRace = _Player.Score.BestRace;
	
	_Player.IsSpawned = True;
	_Player.RaceStartTime = Now+2500;
	
	UI.UISequence = CUIConfig::EUISequence::Playing;
	
	declare netwrite Integer Net_NEM_Start for UI;
	Net_NEM_Start = _Player.RaceStartTime;
	
	declare netwrite Text Net_NEM_Car for UI;
	Net_NEM_Car = Vehicle;

	Layers2::Attach("Ingame",_Player);
}

Void RespawnPlayer(CTmPlayer _Player, Text[Text] _OnlineGhosts) {
	declare UI <=> UIManager.GetUI(_Player);
	Layers2::Detach("Ingame",_Player);
	UnspawnPlayer(_Player);
	if(ResumeInfo[0] != "") {
		wait(PlayersWaiting.existskey(0));
		SpawnPlayer(_Player,_OnlineGhosts);
	}
}

Void Init() {
	wait(Players.count>0);
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	UiDisplayStuntsNames = True;	
	UIManager.UIAll.OverlayHideChat = True;
  UIManager.UIAll.OverlayHidePosition = True;
  UIManager.UIAll.OverlayHideSpectatorControllers = True;
  UIManager.UIAll.OverlayHideBackground = True;
  UIManager.UIAll.OverlayHideCheckPointList = True;
  UIManager.UIAll.OverlayHideOpponentsInfo = True;
  UIManager.UIAll.OverlayHideRoundScores = True;
  UIManager.UIAll.OverlayHideEndMapLadderRecap = True;
  UIManager.UIAll.OverlayHideCheckPointTime = True;
  UIManager.UIAll.AltMenuNoDefaultScores = True;
  UIManager.UIAll.AltMenuNoCustomScores = True;

  UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
  UIManager.UIAll.SmallScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	
	ItemList_Begin();
	
	declare CanyonCar = ItemList_Add("CanyonCar");
	declare StadiumCar = ItemList_Add("StadiumCar");
	declare ValleyCar = ItemList_Add("ValleyCar");
	declare LagoonCar = ItemList_Add("LagoonCar");
	
	ItemList_AddWithSkin("DesertCar", "Skins/Models/DesertCar/DesertCarNew.zip");
	ItemList_AddWithSkin("SnowCar", "Skins/Models/SnowCar/SnowCarNew.zip");
	ItemList_AddWithSkin("RallyCar", "Skins/Models/RallyCar/RallyCarNew.zip");
	ItemList_AddWithSkin("BayCar", "Skins/Models/BayCar/BayCarNew.zip");
	ItemList_AddWithSkin("IslandCar", "Skins/Models/IslandCar/IslandCarNew.zip");
	ItemList_AddWithSkin("CoastCar", "Skins/Models/CoastCar/CoastCarNew.zip");
	
	declare DesertCar = ItemList_AddWithSkin("DesertCarNew.Item.Gbx",Skins::GetDesertCar());
	declare SnowCar = ItemList_AddWithSkin("SnowCarNew.Item.Gbx",Skins::GetSnowCar());
	declare RallyCar = ItemList_AddWithSkin("RallyCarNew.Item.Gbx",Skins::GetRallyCar());
	declare BayCar = ItemList_AddWithSkin("BayCarNew.Item.Gbx",Skins::GetBayCar());
	declare IslandCar = ItemList_AddWithSkin("IslandCarNew.Item.Gbx",Skins::GetIslandCar());
	declare CoastCar = ItemList_AddWithSkin("CoastCarNew.Item.Gbx",Skins::GetCoastCar());
	
	declare CanyonCarOnStadium = ItemList_Add("CanyonVehicle.Item.Gbx");
	declare StadiumCarOnStadium = ItemList_Add("StadiumVehicle.Item.Gbx");
	declare ValleyCarOnStadium = ItemList_Add("ValleyVehicle.Item.Gbx");
	declare LagoonCarOnStadium = ItemList_Add("LagoonVehicle.Item.Gbx");
	
	declare DesertCarOnStadium = ItemList_AddWithSkin("DesertCarOnStadium.Item.Gbx",Skins::GetDesertCar());
	declare SnowCarOnStadium = ItemList_AddWithSkin("SnowCarOnStadium.Item.Gbx",Skins::GetSnowCar());
	declare RallyCarOnStadium = ItemList_AddWithSkin("RallyCarOnStadium.Item.Gbx",Skins::GetRallyCar());
	declare BayCarOnStadium = ItemList_AddWithSkin("BayCarOnStadium.Item.Gbx",Skins::GetBayCar());
	declare IslandCarOnStadium = ItemList_AddWithSkin("IslandCarOnStadium.Item.Gbx",Skins::GetIslandCar());
	declare CoastCarOnStadium = ItemList_AddWithSkin("CoastCarOnStadium.Item.Gbx",Skins::GetCoastCar());
	
	ItemList_End();
	
	CutOffTimeLimit = -1;
	
	RequestLoadMap();
  wait(MapLoaded);
	
	declare netwrite Text Net_MapCar for UI;
	Net_MapCar = MapPlayerModelName;

	Map.TMObjective_AuthorTime = 999999999;
	Map.TMObjective_GoldTime = 999999999;
	Map.TMObjective_SilverTime = 999999999;
	Map.TMObjective_BronzeTime = 999999999;

	if(Map.MapInfo.CollectionName == "Stadium") {
		VehicleList["CanyonCar"] = CanyonCarOnStadium;
		VehicleList["StadiumCar"] = StadiumCarOnStadium;
		VehicleList["ValleyCar"] = ValleyCarOnStadium;
		VehicleList["LagoonCar"] = LagoonCarOnStadium;
	}
	else {
		VehicleList["CanyonCar"] = CanyonCar;
		VehicleList["StadiumCar"] = StadiumCar;
		VehicleList["ValleyCar"] = ValleyCar;
		VehicleList["LagoonCar"] = LagoonCar;
	}
	
	VehicleList["DesertCar"] = DesertCar;
	VehicleList["SnowCar"] = SnowCar;
	VehicleList["RallyCar"] = RallyCar;
	VehicleList["BayCar"] = BayCar;
	VehicleList["IslandCar"] = IslandCar;
	VehicleList["CoastCar"] = CoastCar;
	
	Layers2::Create("Start","file://Media/Manialinks/Start.xml");
	Layers2::Attach("Start",Null);
	
	Layers2::Create("GameMenu","file://Media/Manialinks/GameMenuSolo.xml");
	Layers2::SetType("GameMenu", CUILayer::EUILayerType::InGameMenu);
	Layers2::SetAnimationTypeIn("GameMenu",CUILayer::EUILayerAnimation::ScaleSlow);
	Layers2::Attach("GameMenu",Null);
	
	Layers2::Create("LoadingIngame","file://Media/Manialinks/LoadingIngame.xml");
	
	Layers2::Create("Ingame","file://Media/Manialinks/Ingame.xml");
	Layers2::SetAnimationTypeIn("Ingame",CUILayer::EUILayerAnimation::UpSlow);
	
	Layers2::Create("Endscreen","file://Media/Manialinks/Endscreen.xml");
	Layers2::SetAnimationTypeIn("Endscreen",CUILayer::EUILayerAnimation::ScaleSlow);
}

Boolean Start() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	declare Ident MyUserID for Player.User;
	
	/*declare Rank = ScoreMgr.MapLeaderBoard_GetPlayerRanking(Player.Id, Map.MapInfo.MapUid, "ValleyCar2", "World");
	declare Count = ScoreMgr.MapLeaderBoard_GetPlayerCount(Map.MapInfo.MapUid, "ValleyCar2", "World");
	log("RANK:" ^ Rank);
	log("SKILLPOINTS:" ^ (343452-1)*100/1);*/
	
	declare Cars = ["CanyonCar","StadiumCar","ValleyCar","LagoonCar", "DesertCar", "SnowCar", "RallyCar", "BayCar", "IslandCar", "CoastCar"];

	RefreshPersonalRecords();
	
	for(i,0,9) GhostList[Cars[i]] = ScoreMgr.Map_GetRecordGhost(MyUserID,Map.MapInfo.MapUid,Cars[i]^"2");
	for(i,0,9) wait(!GhostList[Cars[i]].IsProcessing);
	
	Zones = TextLib::Split("|",Player.User.ZonePath);
	
	declare netwrite Text Net_Environment for UI;
	Net_Environment = Map.CollectionName;
	declare netwrite Text Net_Map for UI;
	Net_Map = TextLib::StripFormatting(Map.MapInfo.Name);
	
	/*if(S_Car == "Any") {	
		
	}
	else {
		Vehicle = S_Car;
	}*/
	
	ResumeInfo = ["","","",""];

  return True;
}

Void Event(CTmModeEvent _Event) {
	declare UI <=> UIManager.GetUI(_Event.Player);

	switch(_Event.Type) {
		case CTmModeEvent::EType::StartLine: {
			
		}
		case CTmModeEvent::EType::WayPoint: {
			if(_Event.IsEndRace) {
				Ghost = ScoreMgr.Playground_GetPlayerGhost(_Event.Player);
				TM::EndRaceSequence_Add(_Event.Player, "");
				Finished = True;
				UIManager.UIAll.OverlayHideChrono = True;
				Layers2::SetVisibility("GameMenu",False);
			}
			else if(_Event.IsEndLap) {
				
			}
			else {
				
			}
		}
		case CTmModeEvent::EType::Stunt: {
			declare netwrite Integer StuntCounter for UI;
			StuntCounter += _Event.Points;
		}
	}
}

Void EventUI(CUIConfigEvent _Event) {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	declare Ident MyUserID for Player.User;
	
	switch(_Event.CustomEventType) {
		case "Request_Leaderboard": {
			declare netwrite Text[Text][] Net_NEM_EventResult_Leaderboard for UI;
			declare netwrite Text Net_NEM_EventResult_Leaderboard_State for UI;
			Net_NEM_EventResult_Leaderboard.clear();
			Net_NEM_EventResult_Leaderboard_State = "LOADING";
			if(_Event.CustomEventData[1] == "Buddies") {
				declare Integer C;
				if(Map.MapInfo.CollectionName == "Canyon" && _Event.CustomEventData[0] == "CanyonCar") C = 0;
				else if(Map.MapInfo.CollectionName == "Stadium" && _Event.CustomEventData[0] == "CanyonCar") C = 1;
				else if(Map.MapInfo.CollectionName == "Valley" && _Event.CustomEventData[0] == "CanyonCar") C = 2;
				else if(Map.MapInfo.CollectionName == "Lagoon" && _Event.CustomEventData[0] == "CanyonCar") C = 3;
				else if(Map.MapInfo.CollectionName == "Canyon" && _Event.CustomEventData[0] == "StadiumCar") C = 4;
				else if(Map.MapInfo.CollectionName == "Stadium" && _Event.CustomEventData[0] == "StadiumCar") C = 5;
				else if(Map.MapInfo.CollectionName == "Valley" && _Event.CustomEventData[0] == "StadiumCar") C = 6;
				else if(Map.MapInfo.CollectionName == "Lagoon" && _Event.CustomEventData[0] == "StadiumCar") C = 7;
				else if(Map.MapInfo.CollectionName == "Canyon" && _Event.CustomEventData[0] == "ValleyCar") C = 8;
				else if(Map.MapInfo.CollectionName == "Stadium" && _Event.CustomEventData[0] == "ValleyCar") C = 9;
				else if(Map.MapInfo.CollectionName == "Valley" && _Event.CustomEventData[0] == "ValleyCar") C = 10;
				else if(Map.MapInfo.CollectionName == "Lagoon" && _Event.CustomEventData[0] == "ValleyCar") C = 11;
				else if(Map.MapInfo.CollectionName == "Canyon" && _Event.CustomEventData[0] == "LagoonCar") C = 12;
				else if(Map.MapInfo.CollectionName == "Stadium" && _Event.CustomEventData[0] == "LagoonCar") C = 13;
				else if(Map.MapInfo.CollectionName == "Valley" && _Event.CustomEventData[0] == "LagoonCar") C = 14;
				else if(Map.MapInfo.CollectionName == "Lagoon" && _Event.CustomEventData[0] == "LagoonCar") C = 15;
				
				LeaderboardBuddiesRequest = ScoreMgr.Campaign_GetBuddiesMapRecord(MyUserID, DataFileMgr.Campaigns[C].CampaignId, Map.MapInfo.MapUid);
			}
			else {
				LeaderboardRequest = ScoreMgr.MapLeaderBoard_GetPlayerList(MyUserID, Map.MapInfo.MapUid, _Event.CustomEventData[0]^"2", _Event.CustomEventData[1], 1, 10);
				if(LeaderboardRequest == Null)
					Net_NEM_EventResult_Leaderboard_State = "ERROR";
			}
		}
	}
}

Void EventScore() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	if(LeaderboardRequest != Null) {
		if(!LeaderboardRequest.IsProcessing) {			
			if(LeaderboardRequest.HasSucceeded) {
				declare netwrite Text[Text][] Net_NEM_EventResult_Leaderboard for UI;
				declare netwrite Text Net_NEM_EventResult_Leaderboard_State for UI;
				Net_NEM_EventResult_Leaderboard_State = "SUCCESS";
				Net_NEM_EventResult_Leaderboard.clear();
				foreach(Line,LeaderboardRequest.LeaderBoardInfo) {
					Net_NEM_EventResult_Leaderboard.add(
						[
							"Login" => Line.Login,
							"Nickname" => Line.DisplayName,
							"Time" => Line.Score^"",
							"Replay" => Line.ReplayUrl
						]
					);
				}
			}
			if(LeaderboardRequest.HasFailed) {
				declare netwrite Text[Text][] Net_NEM_EventResult_Leaderboard for UI;
				Net_NEM_EventResult_Leaderboard.clear();
				declare netwrite Text Net_NEM_EventResult_Leaderboard_State for UI;
				Net_NEM_EventResult_Leaderboard_State = "ERROR";
			}
			
			ScoreMgr.TaskResult_Release(LeaderboardRequest.Id);
			LeaderboardRequest = Null;
		}
	}
	if(LeaderboardBuddiesRequest != Null) {
		if(!LeaderboardBuddiesRequest.IsProcessing) {			
			if(LeaderboardBuddiesRequest.HasSucceeded) {
				declare netwrite Text[Text][] Net_NEM_EventResult_Leaderboard for UI;
				declare netwrite Text Net_NEM_EventResult_Leaderboard_State for UI;
				Net_NEM_EventResult_Leaderboard_State = "SUCCESS";
				Net_NEM_EventResult_Leaderboard.clear();
				foreach(Line,LeaderboardBuddiesRequest.BuddiesChallengeRecord) {
					Net_NEM_EventResult_Leaderboard.add(
						[
							"Login" => Line.OpponentLogin,
							"Nickname" => Line.OpponentDisplayName,
							"Time" => Line.OpponentRecordScore^"",
							"Replay" => Line.OpponentRecordUrl
						]
					);
				}
			}
			if(LeaderboardBuddiesRequest.HasFailed) {
				declare netwrite Text[Text][] Net_NEM_EventResult_Leaderboard for UI;
				Net_NEM_EventResult_Leaderboard.clear();
				declare netwrite Text Net_NEM_EventResult_Leaderboard_State for UI;
				Net_NEM_EventResult_Leaderboard_State = "ERROR";
			}
			
			ScoreMgr.TaskResult_Release(LeaderboardBuddiesRequest.Id);
			LeaderboardBuddiesRequest = Null;
		}
	}
	
}

Void Loop() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	declare Ident MyUserID for Player.User;
		
	declare netwrite Text Net_NEM_Test_State for UI;
	Net_NEM_Test_State = ""^ScoreMgr.ScoreStatus_GetLocalStatus(MyUserID);
	
	declare netread Text[] Net_NEM_ResumeInfo for UI;
	declare netread Text[Text] Net_NEM_Replays for UI;
	
	if(Player.RaceStartTime == 0 && Finished) {
		Player.Score.PrevRace = Ghost.Result;
		
		declare netwrite Integer Net_Record for UI;
		Net_Record = Ghost.Result.Time;
		
		declare netwrite Text Net_Type for UI;
				
		if(Player.Score.BestRace.Time == -1) {
			log("First finish");
			SetRecordRequest = ScoreMgr.Map_SetNewRecord(MyUserID, Map.MapInfo.MapUid, Vehicle^"2", Ghost);
			if(SetRecordRequest != Null) {
				wait(!SetRecordRequest.IsProcessing);
				if(SetRecordRequest.HasSucceeded) {
					Player.Score.BestRace = Ghost.Result;
					Net_Type = "FIRST_FINISH";
				}
				ScoreMgr.TaskResult_Release(SetRecordRequest.Id);
			}
		}
		else if(Ghost.Result.Time < Player.Score.BestRace.Time) {
			SetRecordRequest = ScoreMgr.Map_SetNewRecord(MyUserID, Map.MapInfo.MapUid, Vehicle^"2", Ghost);
			if(SetRecordRequest != Null) {
				wait(!SetRecordRequest.IsProcessing);
				if(SetRecordRequest.HasSucceeded) {
					Player.Score.BestRace = Ghost.Result;
					Net_Type = "PERSONAL_BEST";
				}
				ScoreMgr.TaskResult_Release(SetRecordRequest.Id);
			}
		}
		else if(Ghost.Result.Time == Player.Score.BestRace.Time) {
			Net_Type = "EQUAL";
		}
		else {
			Net_Type = "WORSE";
		}
		
		RefreshPersonalRecords();
	
		declare netwrite Integer Net_NEM_Validation for UI;
		Net_NEM_Validation = 0;
		
		declare netwrite Text[Text][] Net_NEM_Leaderboard for UI;
		Net_NEM_Leaderboard.clear();
		declare LeaderboardScore = ScoreMgr.MapLeaderBoard_GetPlayerList(MyUserID, Map.MapInfo.MapUid, Vehicle^"2", "World", 1, 10);
		
		if(Zones.count > 0) {
			declare netwrite Integer Net_NEM_FirstFinish_PlayerCount for UI;
			Net_NEM_FirstFinish_PlayerCount = ScoreMgr.MapLeaderBoard_GetPlayerCount(Map.MapInfo.MapUid, Vehicle^"2", "World");
			
			if(Map::IsCampaignMap(Map.MapInfo.MapUid)) {
				declare MapRequest = Http.CreateGet("http://trackmania.bigbang1112.eu/nadeoenvimix/api/map_info.php?uid=" ^ Map.MapInfo.MapUid);
				wait(MapRequest.IsCompleted);
				if(MapRequest.StatusCode == 200) {
					declare Doc = Xml.Create(MapRequest.Result);
					if(Doc.GetFirstChild("MAP_INFO").GetFirstChild(Vehicle) == Null) {
						Net_NEM_Validation = -1;
					}
					else if(Doc.GetFirstChild("MAP_INFO").GetFirstChild(Vehicle).GetAttributeText("ValidatorLogin", "") == "") {
						Net_NEM_Validation = 1;
					}
					Xml.Destroy(Doc);
				}
				else if(MapRequest.StatusCode != 403) {
					Net_NEM_Validation = -1;
				}
				Http.Destroy(MapRequest);
			}
		}
		
		Layers2::Detach("Ingame",Player);
		Layers2::Attach("Endscreen",Player);
		declare netread Boolean Net_NEM_Continue for UI;
		
		while(!Net_NEM_Continue) {
			declare netwrite Integer Net_NEM_Skillpoints for UI;
			Net_NEM_Skillpoints = ScoreMgr.Map_GetSkillPoints(MyUserID, Map.MapInfo.MapUid, Vehicle^"2");
			if(LeaderboardScore != Null) {
				if(LeaderboardScore.HasSucceeded) {
					foreach(Info,LeaderboardScore.LeaderBoardInfo)
						Net_NEM_Leaderboard.add(["Nickname" => Info.DisplayName, "Time" => Info.Score^""]);
					ScoreMgr.TaskResult_Release(LeaderboardScore.Id);
					LeaderboardScore = Null;
				}
			}
			yield;
		}
		
		Layers2::Detach("Endscreen",Player);
		Layers2::SetVisibility("GameMenu",True);
		TM::EndRaceSequence_Remove(Player);
		Solo_SetNewRecord(Player.Score, CMode::EMedal::None);
		wait(!Solo_NewRecordSequenceInProgress);
		UIManager.UIAll.OverlayHideChrono = False;
		RespawnPlayer(Player,Net_NEM_Replays);
		Layers2::Attach("Ingame",Player);
		Finished = False;
	}
	
	foreach(Key=>Value,Net_NEM_Replays) {
		if(!Replays.exists(Value)) {
			Replays = Net_NEM_Replays;
			RespawnPlayer(Player,Net_NEM_Replays);
		}
	}
	
	foreach(Key=>Value,Replays) {
		if(!Net_NEM_Replays.exists(Value)) {
			Replays = Net_NEM_Replays;
			RespawnPlayer(Player,Net_NEM_Replays);
		}
	}
	
	if(Net_NEM_ResumeInfo.count >= 5)
	if(ResumeInfo[0] != Net_NEM_ResumeInfo[0]
	|| ResumeInfo[1] != Net_NEM_ResumeInfo[1]
	|| ResumeInfo[2] != Net_NEM_ResumeInfo[2]
	|| ResumeInfo[3] != Net_NEM_ResumeInfo[3]
	|| ResumeInfo[4] != Net_NEM_ResumeInfo[4]
	|| ResumeInfo[5] != Net_NEM_ResumeInfo[5]
	|| ResumeInfo[6] != Net_NEM_ResumeInfo[6]
	|| ResumeInfo[7] != Net_NEM_ResumeInfo[7]
	|| ResumeInfo[8] != Net_NEM_ResumeInfo[8]
	|| ResumeInfo[9] != Net_NEM_ResumeInfo[9]) {
		ResumeInfo = Net_NEM_ResumeInfo;
		RespawnPlayer(Player,Net_NEM_Replays);
	}
	
	if(ResumeInfo[0] != "" && !Finished) {
		if(PlayersWaiting.existskey(0)) {
			Player.IsSpawned = True;
			Player.RaceStartTime = Now+2500;
			
			declare netwrite Integer Net_NEM_Start for UI;
			Net_NEM_Start = Player.RaceStartTime;
		}
	}
	
	TM::EndRaceSequence_Update();
}

main() {
    Init();
	Start();
	
	while(!ServerShutdownRequested && !Terminate) {		
		foreach(Event, PendingEvents) {
			Event(Event);
		}
		
		foreach(Event,UIManager.PendingEvents) {
			EventUI(Event);
		}
		
		EventScore();
	
		Loop();

		yield;
	}

    UIManager.ResetAll();
}

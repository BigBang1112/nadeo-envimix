// Time Attack mode for Envimix
//
// Scripted by BigBang1112

#RequireContext CTmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib

#Include "Libs/Nadeo/Layers2.Script.txt" as Layers2
#Include "Libs/Nadeo/TrackMania/TM.Script.txt" as TM
#Include "Libs/Nadeo/TrackMania/TM2.Script.txt" as TM2
#Include "Libs/Nadeo/Message.Script.txt" as Message

#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Setting S_TimeLimit 6000
#Setting S_IndependentLaps True
#Setting S_EnableOriginalCar False

Void Unprepare() {
	foreach (Player in AllPlayers) {
		declare Boolean Prepared for Player;
		Prepared = False;
	}
}

Void CreateTestificates() {
	Users_DestroyAllFakes();
	Users_CreateFake("wat",0);
}

main() {
	log("[Server] GAMEMODE START");

	declare PreviousTimeLimit = S_TimeLimit;
	
	ItemList_Begin();
	declare CanyonCar = ItemList_Add("CanyonCar");
	declare StadiumCar = ItemList_Add("StadiumCar");
	declare ValleyCar = ItemList_Add("ValleyCar");
	declare LagoonCar = ItemList_Add("LagoonCar");

	declare CanyonCarOnStadium = ItemList_Add("CanyonVehicle.Item.Gbx");
	declare StadiumCarOnStadium = ItemList_Add("StadiumVehicle.Item.Gbx");
	declare ValleyCarOnStadium = ItemList_Add("ValleyVehicle.Item.Gbx");
	declare LagoonCarOnStadium = ItemList_Add("LagoonVehicle.Item.Gbx");
	ItemList_End();
	
	log("[Server] CAR MODELS LOADED");
	
	ActionList_Begin();
	ActionList_End();
	
	EnableScaleCar = True;
	EnableBonusEvents = True;
	
	ModeStatusMessage = "wat";
	
	UiDisplayStuntsNames = True;
	IndependantLaps = True;
	
	UIManager.UIAll.OverlayHideMultilapInfos = True;
	UIManager.UIAll.OverlayHideCheckPointList = True;
	UIManager.UIAll.OverlayHideCheckPointTime = True;
	UIManager.UIAll.OverlayHidePosition = True;
	UIManager.UIAll.ScoreTableOnlyManialink = True;
	UIManager.UIAll.OverlayHideEndMapLadderRecap = True;
	
	Scores_Sort(CTmMode::ETmScoreSortOrder::TotalPoints);
	
	//CreateTestificates();
	
	Layers2::Create("GameMenu","file://Media/Manialinks/GameMenuMultiplayer.xml");
	Layers2::SetType("GameMenu", CUILayer::EUILayerType::InGameMenu);
	Layers2::SetAnimationTypeIn("GameMenu",CUILayer::EUILayerAnimation::ScaleSlow);
	
	Layers2::Create("ScoreTable","file://Media/Manialinks/ScoreboardTimeAttack.xml");
	Layers2::SetType("ScoreTable", CUILayer::EUILayerType::ScoresTable);
	Layers2::Attach("ScoreTable");
	
	Layers2::Create("Ingame","file://Media/Manialinks/IngameMultiplayer.xml");
	
	log("[Server] LAYERS CREATED");
	
	Unprepare();
	
		while(!ServerShutdownRequested) {
			UIManager.UIAll.UISequence = CUIConfig::EUISequence::None;
			RequestLoadMap();
			log("[Server] MAP REQUEST");
			wait(MapLoaded);
			log("[Server] MAP LOADED");
			
			if(Map::IsNadeoMap(Map.MapInfo))
				Map.MapName = Map.MapInfo.CollectionName^TextLib::StripFormatting(Map.MapInfo.Name);
			
			MatchEndRequested = False;
			if(MapList.count > 1) {
				if(NextMapIndex == MapList.count - 1)
					NextMapIndex = 0;
				else
					NextMapIndex += 1;
			}
			
			log("[Server] INITIALIZING LEADERBOARD");
			declare UltraLeaderboard = ["CanyonCar" => Text[Text][], "StadiumCar" => Text[Text][], "ValleyCar" => Text[Text][], "LagoonCar" => Text[Text][]];
			foreach(Player,AllPlayers) {
				declare netwrite Text[Text][][Text] Net_NEM_UltraLeaderboard for UIManager.GetUI(Player);
				Net_NEM_UltraLeaderboard = UltraLeaderboard; // Sends the leaderboard info to the player UI
			}
			
			declare Ident[Text] CarList;
			if(Map.MapInfo.CollectionName == "Stadium") { // It its a Stadium map
				// It will use special cars which can be placed on Stadium
				CarList["CanyonCar"] = CanyonCarOnStadium;
				CarList["StadiumCar"] = StadiumCarOnStadium;
				CarList["ValleyCar"] = ValleyCarOnStadium;
				CarList["LagoonCar"] = LagoonCarOnStadium;
				
				log("[Server] STADIUM MAP: Using special car models");
			}
			else {
				// Otherwise use the classic ones which have a skin
				CarList["CanyonCar"] = CanyonCar;
				CarList["StadiumCar"] = StadiumCar;
				CarList["ValleyCar"] = ValleyCar;
				CarList["LagoonCar"] = LagoonCar;
				
				log("[Server] NON-STADIUM MAP: Using original car models");
			}
	
			CutOffTimeLimit = Now + S_TimeLimit * 1000; // Sets time limit which is in milliseconds
			log("[Server] TIME LIMIT: "^S_TimeLimit^"s");
			
			UIManager.UIAll.OverlayHideSpectatorControllers = False;
			UIManager.UIAll.OverlayHideSpectatorInfos = False;
			UIManager.UIAll.UISequence = CUIConfig::EUISequence::None;
			
			log("[Server] INITIALIZING RECORD SYSTEM");
			declare Integer[Text][Text] Records = ["CanyonCar" => Integer[Text], "StadiumCar" => Integer[Text], "ValleyCar" => Integer[Text], "LagoonCar" => Integer[Text]];
			declare Integer[Text][Text] PrevRecords = ["CanyonCar" => Integer[Text], "StadiumCar" => Integer[Text], "ValleyCar" => Integer[Text], "LagoonCar" => Integer[Text]];
			declare Integer[][Text][Text] Checkpoints = ["CanyonCar" => Integer[][Text], "StadiumCar" => Integer[][Text], "ValleyCar" => Integer[][Text], "LagoonCar" => Integer[][Text]];
			declare Integer[][Text][Text] PrevCheckpoints = ["CanyonCar" => Integer[][Text], "StadiumCar" => Integer[][Text], "ValleyCar" => Integer[][Text], "LagoonCar" => Integer[][Text]];
			
			log("[Server] STARTING GAME LOOP");
			declare GameLoop = True;
			while(GameLoop) { // Game loop running around 20 times per second
				foreach(Event, PendingEvents) { // Checks global events around the mode
					if(Event.Type == CTmModeEvent::EType::WayPoint) {
						if(Event.IsEndRace || Event.IsEndLap) {
							declare Text[] ResumeInfo for Event.Player;
							
							declare RaceTime = Event.LapTime;
							declare Car = ResumeInfo[0];
							
							PrevRecords[Car][Event.Player.User.Login] = RaceTime;
							Event.Player.Score.PrevRace.Time = RaceTime;
							
							// Here is the record comparison which informs the 4 states below
							
							if(Records[Car][Event.Player.User.Login] == -1 || RaceTime < Records[Car][Event.Player.User.Login]) {
								log("[Server] FINISH: First finish/improvement ("^Event.Player.User.Login^", "^RaceTime^")");

								declare BestTime = -2;
								foreach(Login=>Rec,Records[Car]) {
									if(Rec != -1 && BestTime == -2)
										BestTime = Rec;
									else if(Rec < BestTime && Rec > -1)
										BestTime = Rec;
								}

								if(RaceTime < BestTime || BestTime == -2)
								if(Records[Car][Event.Player.User.Login] != BestTime || BestTime == -2) { // If driven time is better than the old best time and the player isn't already first
									Message::SendStatusMessage(Event.Player.User.Name ^ "$z $sleads "^Car^" with "^TextLib::TimeToText(RaceTime,True)^TextLib::SubText(""^RaceTime,TextLib::Length(""^RaceTime)-1,1)^"!", 2500, 0);
								}

								Records[Car][Event.Player.User.Login] = RaceTime;
								Event.Player.Score.BestRace.Time = RaceTime;
								
								Event.Player.Score.BestRace.Checkpoints.clear();
								Checkpoints[Car][Event.Player.User.Login].clear();
								if(PrevCheckpoints[Car].count > 0)
								foreach(Checkpoint,PrevCheckpoints[Car][Event.Player.User.Login]) {
									Event.Player.Score.BestRace.Checkpoints.add(Checkpoint);
									Checkpoints[Car][Event.Player.User.Login].add(Checkpoint);
								}
								Event.Player.Score.BestRace.Checkpoints.add(RaceTime);
								Checkpoints[Car][Event.Player.User.Login].add(RaceTime);
								
								PrevCheckpoints[Car][Event.Player.User.Login].clear();
									
								declare Text Rank;
								if(Event.Player.User.LadderRank == -1) Rank = "Unranked";
								else Rank = "Rank "^Event.Player.User.LadderRank; // wtf jsem kripl
								
								// Confirms the race end which adds outro and leaderboard showcase
								if(Event.IsEndRace) TM2::EndRace(Event.Player,True);
								
								// Here begins the record saving process
								
								// -1 means no record
								declare RecordLine = -1;
								for(i,0,UltraLeaderboard[Car].count - 1) {
									// If ultra leaderboard contains the user already
									if(UltraLeaderboard[Car][i]["Login"] == Event.Player.User.Login) {
										RecordLine = i; // Stores the line
										break;
									}
								}
								
								if(RecordLine != -1) { // If the user is already in the leaderboard, update its record
									UltraLeaderboard[Car][RecordLine] = ["Login" => Event.Player.User.Login,"Time" => ""^Records[Car][Event.Player.User.Login], "Name" => Event.Player.User.Name, "AvatarUrl" => Event.Player.User.AvatarUrl, "CountryFlagUrl" => Event.Player.User.CountryFlagUrl, "Rank" => Rank, "Fame" => ""^Event.Player.User.FameStars, "Connected"=>"True"];
								}
								else { // Otherwise add him there
									UltraLeaderboard[Car].add(["Login" => Event.Player.User.Login,"Time" => ""^Records[Car][Event.Player.User.Login], "Name" => Event.Player.User.Name, "AvatarUrl" => Event.Player.User.AvatarUrl, "CountryFlagUrl" => Event.Player.User.CountryFlagUrl, "Rank" => Rank, "Fame" => ""^Event.Player.User.FameStars, "Connected"=>"True"]);
								}
								
								// Thats it on the server side. It might be weird because it doesn't sort, but that is actually done on the client side to save performance.
							}
							else if(RaceTime == Records[Car][Event.Player.User.Login]) {
								log("[Server] FINISH: Equal ("^Event.Player.User.Login^", "^RaceTime^")");
							}
							else {
								log("[Server] FINISH: Worse ("^Event.Player.User.Login^", "^RaceTime^")");
							}
							
							
						}
						else {
							declare RaceTime = Event.LapTime;
							
							log("[Server] CHECKPOINT ("^Event.Player.User.Login^", "^RaceTime^")");
							declare Text[] ResumeInfo for Event.Player;
							
							if(!PrevCheckpoints[ResumeInfo[0]].existskey(Event.Player.User.Login))
								PrevCheckpoints[ResumeInfo[0]][Event.Player.User.Login] = Integer[];
							
							PrevCheckpoints[ResumeInfo[0]][Event.Player.User.Login].add(RaceTime);
						}
					}
					
					if(Event.Type == CTmModeEvent::EType::OnPlayerAdded) {
						log("[Server] NEW PLAYER ("^Event.Player.User.Login^")");
						declare Boolean Prepared for Event.Player;
						Prepared = False;
					}
					
					if(Event.Type == CTmModeEvent::EType::OnPlayerRemoved) {
						log("[Server] PLAYER LEFT ("^Event.User.Login^")");
						
						foreach(Car=>LB,UltraLeaderboard) {
							for(i,0,LB.count-1) {
								if(UltraLeaderboard[Car][i]["Login"] == Event.User.Login)
									UltraLeaderboard[Car][i]["Connected"] = "False";
							}
						}
					}
				}
				
				TM2::Loop();
				Message::Loop();
				
				// This section goes through all players which are not prepared with the mode and assigns them certain information
				foreach (Player in AllPlayers) {
					declare Boolean Prepared for Player;
					declare Text[] ResumeInfo for Player;
					
					declare UI <=> UIManager.GetUI(Player);
					declare netwrite Text Net_MapCar for UI;
					if(S_EnableOriginalCar) Net_MapCar = "";
					else Net_MapCar = MapPlayerModelName;
					
					if(!Prepared) {
						// Variables stored on a server FOR a player
						declare Text[] ResumeInfo for Player;
						ResumeInfo = [""];
						
						foreach(Car=>LB,UltraLeaderboard) {
							declare RecordLine = -1;
							for(i,0,UltraLeaderboard[Car].count - 1) {
								// If ultra leaderboard contains the user already
								if(UltraLeaderboard[Car][i]["Login"] == Player.User.Login) {
									RecordLine = i; // Stores the line
									break;
								}
							}
						
							if(RecordLine != -1) {
								if(Records[Car].existskey(Player.User.Login))
									UltraLeaderboard[Car][RecordLine] = ["Login" => Player.User.Login,"Time" => ""^Records[Car][Player.User.Login], "Name" => Player.User.Name, "AvatarUrl" => Player.User.AvatarUrl, "CountryFlagUrl" => Player.User.CountryFlagUrl, "Rank" => "", "Fame" => ""^Player.User.FameStars, "Connected"=>"True"];
								else
									UltraLeaderboard[Car][RecordLine] = ["Login" => Player.User.Login,"Time" => ""^-1, "Name" => Player.User.Name, "AvatarUrl" => Player.User.AvatarUrl, "CountryFlagUrl" => Player.User.CountryFlagUrl, "Rank" => "", "Fame" => ""^Player.User.FameStars, "Connected"=>"True"];
							}
							else
								UltraLeaderboard[Car].add(["Login" => Player.User.Login,"Time" => ""^-1, "Name" => Player.User.Name, "AvatarUrl" => Player.User.AvatarUrl, "CountryFlagUrl" => Player.User.CountryFlagUrl, "Rank" => "", "Fame" => ""^Player.User.FameStars, "Connected"=>"True"]);
						}
						
						Layers2::Attach("GameMenu",Player);
						Layers2::Attach("Ingame",Player);
						
						Prepared = True;
						log("[Server] PLAYER PREPARED ("^Player.User.Login^")");
					}
					else {
						declare netwrite Text[Text][][Text] Net_NEM_UltraLeaderboard for UIManager.GetUI(Player);
						Net_NEM_UltraLeaderboard = UltraLeaderboard; // Sends the leaderboard info to the player UI
					}
				}
				
				// This goes through all players that are prepared and ready to go time attack (whenever respawn or new map)
				foreach (Player in PlayersWaiting) {
					declare Boolean Prepared for Player;
					declare Text[] ResumeInfo for Player;
					
					declare UI <=> UIManager.GetUI(Player);
					
					// If they are prepared and have a legal car selected, count comparision is there to avoid random gamemode crashes xd
					if(Prepared && ResumeInfo.count > 0 && ResumeInfo[0] != "" && (ResumeInfo[0] != MapPlayerModelName || S_EnableOriginalCar)) {
						Player.ForceModelId = CarList[ResumeInfo[0]];
						TM2::StartRace(Player);
						declare netwrite Integer Net_NEM_Start for UI;
						Net_NEM_Start = Player.RaceStartTime;
						
						if(Player.Score != Null) Ladder_AddPlayer(Player.Score);
						
						PrevCheckpoints[ResumeInfo[0]][Player.User.Login] = Integer[];
					}
				}
				
				// Here it goes through all the players currently enjoying their envimix time
				foreach (Player in Players) {
					declare Boolean Prepared for Player;
					
					if(Prepared) {
						declare UI <=> UIManager.GetUI(Player);
						
						declare Text[] ResumeInfo for Player;
						declare netread Text[] Net_NEM_ResumeInfo for UI;

						declare netwrite Integer[] Net_Records for UI;
						Net_Records = [-1,-1,-1,-1];
						
						declare Counter = 0;
						foreach(Env => Recs,Records) {
							if(Recs.existskey(Player.User.Login)) {
								Net_Records[Counter] = Recs[Player.User.Login];
							}
							Counter+=1;
						}
						
						// This is a special algorithm which detects if player changed the car
						if(Net_NEM_ResumeInfo.count >= 1)
						if(ResumeInfo[0] != Net_NEM_ResumeInfo[0]) {
							ResumeInfo = Net_NEM_ResumeInfo;
							
							log("[Server] CAR CHANGE ("^Player.User.Login^", "^ResumeInfo[0]^")");
							
							Player.Score.Clear();
							
							if(ResumeInfo[0] == "") {
								TM2::WaitRace(Player);
							}
							else if(ResumeInfo[0] == MapPlayerModelName && !S_EnableOriginalCar) { // If player somehow manages to select original car
								// Nothing means invalid action and as well nothing will happen
							}
							else { // If there's a legal car selected
								Player.ForceModelId = CarList[ResumeInfo[0]];
								// This function somehow creates a nice transition between the cars, sad I can't implement that into solo due to ghosts
								TM2::StartRace(Player);
								declare netwrite Integer Net_NEM_Start for UI;
								Net_NEM_Start = Player.RaceStartTime;
								
								if(!Records[ResumeInfo[0]].existskey(Player.User.Login))
									Records[ResumeInfo[0]][Player.User.Login] = -1;
								if(!PrevRecords[ResumeInfo[0]].existskey(Player.User.Login))
									PrevRecords[ResumeInfo[0]][Player.User.Login] = -1;
								if(!Checkpoints[ResumeInfo[0]].existskey(Player.User.Login))
									Checkpoints[ResumeInfo[0]][Player.User.Login] = Integer[];
								
								Player.Score.BestRace.Time = Records[ResumeInfo[0]][Player.User.Login];
								Player.Score.PrevRace.Time = PrevRecords[ResumeInfo[0]][Player.User.Login];
							
								Player.Score.BestRace.Checkpoints.clear();
								foreach(Checkpoint,Checkpoints[ResumeInfo[0]][Player.User.Login]) Player.Score.BestRace.Checkpoints.add(Checkpoint);
							}
						}
					}
				}
				
				// If the time limit is over.
				if(CutOffTimeLimit < Now) MatchEndRequested = True;
				
				if(S_TimeLimit != PreviousTimeLimit) {
					CutOffTimeLimit = Now + S_TimeLimit * 1000; // Sets time limit which is in milliseconds
					log("[Server] TIME LIMIT: "^S_TimeLimit^"s");
					PreviousTimeLimit = S_TimeLimit;
				}
				
				// If the round has ended. This section runs through the whole podium time
				if(MatchEndRequested) {
					log("[Server] MAP END");
					
					Unprepare();
					
					foreach(Player,AllPlayers) {
						Layers2::Detach("GameMenu",Player);
						Layers2::Detach("Ingame");
					}
					
					UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
					log("[Server] PODIUM SEQUENCE");
					TM2::EndRaceAll();
					log("[Server] ALL PLAYERS DESPAWN");
					CutOffTimeLimit = -1; // Removes the time limit from the UI
					UIManager.UIAll.OverlayHideSpectatorControllers = True;
					UIManager.UIAll.OverlayHideSpectatorInfos = True;
					UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
					log("[Server] SCOREBOARD SHOWN");
					
					/*sleep(8000);
					
					// Score calc
					
					declare Integer[Text] BestTimes = ["CanyonCar"=>-1,"StadiumCar"=>-1,"ValleyCar"=>-1,"LagoonCar"=>-1];
					declare Integer[Text] WorstTimes = ["CanyonCar"=>-1,"StadiumCar"=>-1,"ValleyCar"=>-1,"LagoonCar"=>-1];
					foreach(Env=>Recs,Records) {
						foreach(Login=>Rec,Recs) {
							if(BestTimes[Env] > Rec || BestTimes[Env] == -1)
								BestTimes[Env] = Rec;
							if(WorstTimes[Env] < Rec || WorstTimes[Env] == -1)
								WorstTimes[Env] = Rec;
						}
					}

					declare LadderPoints = ["CanyonCar"=>Text[Text],"StadiumCar"=>Text[Text],"ValleyCar"=>Text[Text],"LagoonCar"=>Text[Text]];
					
					foreach(Player,AllPlayers) {
						declare TotalScore = 0;
						foreach(Car,["CanyonCar","StadiumCar","ValleyCar","LagoonCar"]) {
							if(Records[Car].existskey(Player.User.Login)) {
								if(Records[Car][Player.User.Login] == -1) {
									LadderPoints[Car][Player.User.Login] = 0^"";
								}
								else if(WorstTimes[Car] == BestTimes[Car] && Records[Car][Player.User.Login] == BestTimes[Car]) {
									LadderPoints[Car][Player.User.Login] = 100^"";
								}
								else {
									LadderPoints[Car][Player.User.Login] = MathLib::NearestInteger(100 - MathLib::ToReal(Records[Car][Player.User.Login] - BestTimes[Car]) / MathLib::ToReal(WorstTimes[Car] - BestTimes[Car]) * 100)^"";
								}
							}
							else {
								LadderPoints[Car][Player.User.Login] = 0^"";
							}
							TotalScore += TextLib::ToInteger(LadderPoints[Car][Player.User.Login]);
						}
						Player.Score.Points = TotalScore;
					}

					foreach(Player,AllPlayers) {
						declare netwrite Text[Text][Text] Net_NEM_LadderPoints for UIManager.GetUI(Player);
						Net_NEM_LadderPoints = LadderPoints;
					}
					
					Ladder_ComputeRank(CTmMode::ETmScoreSortOrder::TotalPoints);
					log("[Server] CLOSING LADDER MATCH");
					Ladder_CloseMatchRequest();
					wait(!Ladder_RequestInProgress);
					
					// End score calc
					
					foreach (Player in AllPlayers) {
						declare netwrite Boolean Net_NEM_Ladder for UIManager.GetUI(Player);
						Net_NEM_Ladder = True;
					}
					
					sleep(2000);
					
					foreach(Player,AllPlayers) {
						declare TotalScore = 0;
						foreach(Car,["CanyonCar","StadiumCar","ValleyCar","LagoonCar"]) {
							if(Records[Car].existskey(Player.User.Login)) {
								if(Records[Car][Player.User.Login] != -1) {
									LadderPoints[Car][Player.User.Login] = MathLib::NearestInteger(100.0-(BestTimes[Car]/Records[Car][Player.User.Login]*.5+.5)*100.0)^"";
								}
								else {
									LadderPoints[Car][Player.User.Login] = 0^"";
								}
								TotalScore += TextLib::ToInteger(LadderPoints[Car][Player.User.Login]);
							}
						}
						Player.Score.Points = TotalScore;
					}

					foreach(Player,AllPlayers) {
						declare netwrite Text[Text][Text] Net_NEM_LadderPoints for UIManager.GetUI(Player);
						Net_NEM_LadderPoints = LadderPoints;
					}
					
					sleep(2000);
					
					foreach(Player,AllPlayers) {
						declare netwrite Text[Text][Text] Net_NEM_LadderPoints for UIManager.GetUI(Player);
						
						declare Points = Player.Score.LadderScore;
						
						foreach(Car,["CanyonCar","StadiumCar","ValleyCar","LagoonCar"]) {
							if(Points == -1)
								Net_NEM_LadderPoints[Car][Player.User.Login] = "$880-";
							else
								Net_NEM_LadderPoints[Car][Player.User.Login] = "$880"^Points^"LP";
						}
						
					}*/
					
					wait(UIManager.UIAll.UISequenceIsCompleted); 
					UIManager.UIAll.UISequence = CUIConfig::EUISequence::None;
					UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
					GameLoop = False; // Closes the game loop to reach the RequestUnloadMap() below
					log("[Server] GAME LOOP END");
					
					Scores_Clear();

					foreach (Player in AllPlayers) {
						declare netwrite Text[Text][][Text] Net_NEM_UltraLeaderboard for UIManager.GetUI(Player);
						Net_NEM_UltraLeaderboard = ["CanyonCar" => Text[Text][], "StadiumCar" => Text[Text][], "ValleyCar" => Text[Text][], "LagoonCar" => Text[Text][]];
						declare netwrite Boolean Net_NEM_Ladder for UIManager.GetUI(Player);
						Net_NEM_Ladder = False;
					}
				}
		
				yield;
			}
			
			log("[Server] MAP SWITCH");
			RequestUnloadMap();
			wait(!MapLoaded);
			
			yield;
		}
	
	Layers2::Clean(True);
	
	RequestUnloadMap();
}
